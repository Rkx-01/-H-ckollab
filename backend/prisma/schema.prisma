//schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String   @id @default(cuid())
  firebaseUid  String   @unique
  name         String
  email        String   @unique
  bio          String?
  githubUrl    String?
  portfolioUrl String?
  availability String // Available | Busy | Not Available
  academicYear String?
  branch       String?
  interests    String?
  featuredProjects Json? // Array of featured projects with title, tech, link
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  skills      UserSkill[]
  projects    Project[]
  invitations Invitation[]
}

model Skill {
  id       String  @id @default(cuid())
  name     String  @unique
  category String?

  users UserSkill[]
}

model UserSkill {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  skill   Skill  @relation(fields: [skillId], references: [id])
  skillId String
  level   String // Beginner, Intermediate, Advanced

  @@unique([userId, skillId])
}

model Project {
  id          String   @id @default(uuid())
  title       String
  description String
  tags        String[] // ✅ Array field
  techStack   String[] // ✅ Array field
  maxTeamSize Int
  status      String   @default("Open")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator     User         @relation(fields: [creatorId], references: [id])
  creatorId   String
  invitations Invitation[]
}

model Invitation {
  id        String   @id @default(cuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  status    String   @default("Pending") // Pending, Accepted, Declined
  createdAt DateTime @default(now())
}
