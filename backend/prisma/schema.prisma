generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String      @id @default(cuid())
  name                 String
  email                String      @unique
  bio                  String?
  githubUrl            String?
  portfolioUrl         String?
  availability         String
  academicYear         String?
  branch               String?
  interests            String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  featuredProjects     Json?
  firebaseUid          String      @unique
  receivedInvites      Invite[]    @relation("ReceivedInvites")
  sentInvites          Invite[]    @relation("SentInvites")
  projects             Project[]
  skills               UserSkill[]
  collaboratedProjects Project[]   @relation("ProjectCollaborators")
  interestedIn         Project[]   @relation("ProjectInterest")
}

model Skill {
  id       String      @id @default(cuid())
  name     String      @unique
  category String?
  users    UserSkill[]
}

model UserSkill {
  id      String @id @default(cuid())
  userId  String
  skillId String
  level   String
  skill   Skill  @relation(fields: [skillId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@unique([userId, skillId])
}

model Project {
  id                String    @id @default(uuid())
  title             String
  description       String
  tags              String[]
  techStack         String[]
  maxTeamSize       Int
  status            String    @default("Open")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  creatorId         String
  collaborationType String
  deadline          DateTime?
  difficulty        String
  rolesNeeded       String[]
  visibility        String    @default("Open to All")
  inviteStatus      String?   @default("Pending")
  invites           Invite[]
  creator           User      @relation(fields: [creatorId], references: [id])
  collaborators     User[]    @relation("ProjectCollaborators")
  interestedUsers   User[]    @relation("ProjectInterest")
}

model Invite {
  id         String   @id @default(cuid())
  projectId  String
  senderId   String
  receiverId String
  role       String
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  project    Project  @relation(fields: [projectId], references: [id])
  receiver   User     @relation("ReceivedInvites", fields: [receiverId], references: [id])
  sender     User     @relation("SentInvites", fields: [senderId], references: [id])
}
