generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(cuid())
  name                 String
  email                String         @unique
  bio                  String?
  githubUrl            String?
  portfolioUrl         String?
  availability         String
  academicYear         String?
  branch               String?
  interests            String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  featuredProjects     Json?
  firebaseUid          String         @unique
  receivedInvites      Invite[]       @relation("ReceivedInvites")
  sentInvites          Invite[]       @relation("SentInvites")
  projects             Project[]
  skills               UserSkill[]
  collaboratedProjects Project[]      @relation("ProjectCollaborators")
  interestedIn         Project[]      @relation("ProjectInterest")
  hackathons           Hackathon[]
  collaborations       Collaborator[]
}

model Skill {
  id       String      @id @default(cuid())
  name     String      @unique
  category String?
  users    UserSkill[]
}

model UserSkill {
  id      String @id @default(cuid())
  userId  String
  skillId String
  level   String
  skill   Skill  @relation(fields: [skillId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@unique([userId, skillId])
}

model Project {
  id                String         @id @default(uuid())
  title             String
  description       String
  tags              String[]
  techStack         String[]
  maxTeamSize       Int
  status            String         @default("Open")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  creatorId         String
  collaborationType String
  deadline          DateTime?
  difficulty        String
  rolesNeeded       String[]
  visibility        String         @default("Open to All")
  inviteStatus      String?        @default("Pending")
  invites           Invite[]

  creator           User      @relation(fields: [creatorId], references: [id])
  collaborators     User[]    @relation("ProjectCollaborators")
  interestedUsers   User[]    @relation("ProjectInterest")
  isDeleted         Boolean   @default(false)
  isOpen            Boolean   @default(true)

}

model Invite {
  id          String    @id @default(cuid())
  projectId   String
  senderId    String
  receiverId  String
  role        String
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  respondedAt DateTime?
  project     Project   @relation(fields: [projectId], references: [id])
  receiver    User      @relation("ReceivedInvites", fields: [receiverId], references: [id])
  sender      User      @relation("SentInvites", fields: [senderId], references: [id])
}

model Hackathon {
  id              String    @id @default(cuid())
  title           String
  description     String
  theme           String
  hackathonDate   DateTime?
  deadline        DateTime?
  location        String?
  organizer       String?
  eventMode       String? // NEW: Online / Offline / Hybrid
  hackathonLink   String? // NEW: Official website link
  registrationFee String? // NEW: Free / Paid
  rounds          String? // NEW: Description of rounds or phases
  tags            String[]
  techStack       String[]
  rolesNeeded     String[]
  maxTeamSize     Int
  visibility      String
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum JoinMethod {
  invite
  interest
}

model Collaborator {
  id        String     @id @default(cuid())
  project   Project    @relation(fields: [projectId], references: [id])
  projectId String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  joinedAt  DateTime   @default(now())
  joinedVia JoinMethod
}
